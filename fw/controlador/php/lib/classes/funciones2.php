<?class Funciones {    //tH1s1STh34Ppk3Y    var $key = "71069768703af060092465063323ecfe790b52e0";    var $path = "media/";    var $wThumb = 129;    var $hThumb = 80;    var $newWidth = 100;    var $newHeight = 100;    var $contentType = "";    var $registros_mostrar = 10;    var $paginas_mostrar = 10;    var $alturas = array("banner_big" => 200);    var $anchos = array("banner_big" => 600);    function debug($object, $out = NULL) {        echo "<pre>";        print_r($object);        if ($out == 1){            exit;        }    }    function setLogError($modulo, $concepto, $datos_adicionales = ""){        $fecha = date("Y_m_d");        $log_file = fopen("media/logs/topup_error_log_".$fecha.".txt", 'a');        $fecha = date("Y-m-d H:m:s");                $log_line .= $fecha.";".$modulo.";".$concepto;        if($datos_adicionales != "")            $log_line .= ";".$datos_adicionales;                fputs($log_file, $log_line);        fwrite($log_file, chr(13).chr(10));        fclose($log_file);    }    function cleanInjection($str) {        $banchars = array ("'", ",", ";", "--", ")", "(","\n","\r");        $banwords = array (" or "," OR "," Or "," oR "," and ", " AND "," aNd "," aND "," AnD ");         if ( eregi ( "[a-zA-Z0-9]+", $str ) ) {                $str = str_replace ( $banchars, '', ( $str ) );                $str = str_replace ( $banwords, '', ( $str ) );        } else {                $str = NULL;        }        $str = trim($str);        $str = strip_tags($str);        $str = stripslashes($str);        $str = addslashes($str);        $str = htmlspecialchars($str);        return $str;    }    function isLogged() {        if (isset($_SESSION['gestionar']) && $_SESSION['gestionar'] == 'S') {            if (!isset($_SESSION['gestion_codigo']) || $_SESSION['gestion_codigo'] == "" || $_SESSION['gestion_codigo'] == 0) {                return false;            }else                return true;        }else {            if (!isset($_SESSION['codigo']) || $_SESSION['codigo'] == "" || $_SESSION['codigo'] == 0) {                return false;            }else                return true;        }    }    function getDataLoged($data, $gestionado = true) {        if (($gestionado === true) && isset($_SESSION['gestionar']) && $_SESSION['gestionar'] == 'S' && $data != 'gestionar') {            if(isset($_SESSION['gestion_' . $data]))                return $_SESSION['gestion_' . $data];            else                return 0;        }else {            if (isset($_SESSION[$data]))                return $_SESSION[$data];            else                return 0;        }    }    function setDataLoged($data, $valor) {            $_SESSION[$data] = $valor;            if($valor == NULL)                unset($_SESSION[$data]);    }    function setCopie($nombre_copie, $complemento = "") {        require 'php/copies.php';        if ($nombre_copie != "") {            $valor = $copies->$nombre_copie;            $valor .= $complemento;        }else            $valor = $complemento;        //$this->setDataLoged('msj', $valor);        $_SESSION['msj'] = $valor;    }    function getParametrosInSql($primary = "", $type = "UPDATE", $metodo = "POST") {        $parametros = $this->getParametros($metodo, "array");        $respuesta = New stdClass();        $sql_campos = "";        $sql_datos = "";        $respuesta->sql_where = "";        foreach ($parametros as $key => $value) {            if ($type == "INSERT") {                if ($key != $primary) {                    $sql_campos .= $key . ", ";                    $sql_datos .= "'" . $value . "', ";                }            } else {                if ($key != $primary) {                    $sql_datos .= $key . " = '" . $value . "', ";                }            }        }        $respuesta->sql_campos = substr($sql_campos, 0, (strlen($sql_campos) - 2));        $respuesta->sql_datos = substr($sql_datos, 0, (strlen($sql_datos) - 2));        if ($primary != "") {            $respuesta->sql_where = $primary . " = " . $parametros[$primary];        }        return $respuesta;    }    function getParametros($metodo = "POST", $type = "Obj") {        global $test;        if ($type == "array")            $parametros = array();        else            $parametros = New stdClass();        if($test === true)            return $parametros;                if ($metodo == "GET") {            foreach ($_GET as $k => $v) {                $varName = mysql_real_escape_string($k);                $varValue = utf8_decode(mysql_real_escape_string($v));                $$varName = $varValue;                                if ($type == "array")                    $parametros[$varName] = $varValue;                else                    $parametros->$varName = $varValue;            }        }else{            foreach ($_POST as $k => $v) {                $varName = mysql_real_escape_string($k);                $varValue = utf8_decode(mysql_real_escape_string($v));                $$varName = $varValue;                                if ($type == "array")                    $parametros[$varName] = $varValue;                else                    $parametros->$varName = $varValue;            }        }        return $parametros;    }    function keyEncrypt($dato) {        $string = $dato . $this->key;        $encrypt = sha1($string);        return $encrypt;    }    function setEncrypt($dato, $nombre) {        $string = $dato . $this->key;        //$_SESSION['param_encrypt_'.$nombre] = md5($string);    }    function getEncrypt($dato, $nombre) {        $string = $dato . $this->key;        $encrypt = sha1($string);        /* if (isset($_SESSION['param_encrypt_'.$nombre]) && ($encrypt == $_SESSION['param_encrypt_'.$nombre]))          return true;          else */        return false;    }    function setDataGrid($query, $link = NULL, $check_list = false, $campos = NULL) {        global $seccion, $categoriasSoporte, $username, $hostname, $pass, $dbname;        require_once 'plugins/grid/class.eyemysqladap.inc.php';        require_once 'plugins/grid/class.eyedatagrid.inc.php';        $paramGet = $this->getParametros('GET');        $back = '0';        if(isset($paramGet->back))            $back = $paramGet->back;                $this->setDataLoged('grid_row_count', 0);                $db = new EyeMySQLAdap($hostname, $username, $pass, $dbname, FALSE, FALSE);        $dataGrid = new EyeDataGrid($db);        $dataGrid->setQuery($seccion, $query->select, $query->from, $query->primary, $query->where, $query->group_by,$query->order_by, $query->union, $query->GET,$query->count );        if ($link != NULL) {            if (!isset($link->type) || $link->type != "") {                $dataGrid->setColumnType($link->href, $link->type, $link->accion);            }        }        if ($check_list)            $dataGrid->showCheckboxes();        if($campos != NULL){            foreach ($campos as $campo) {                if ($campo->vacio)                    $dataGrid->setColumnType($campo->href, $campo->type, $campo->accion);                    if($campo->type == 17){                        $dataGrid->from_array = new stdClass();                        $name = $campo->href;                        $dataGrid->from_array->$name = $categoriasSoporte;                    }            }        }        $exporting = $this->getDataLoged('exporting');        if($exporting === '1'){            $dataGrid->hideFooter(true);            $dataGrid->limited = false;            $this->setDataLoged('exporting', '0');        }else{            $dataGrid->limited = true;            $dataGrid->hideFooter(false);        }        if ($query->hideFooter)            $dataGrid->hideFooter(true);                       $this->setDataLoged('query', $query);        $dataGrid->setOrderAccion($link->accion_order);        return $dataGrid->printTable($link, $back);    }        function getCalendar($nombre, $par, $date1, $date2, $zindex = 1) {        include_once 'plugins/calendar/classes/tc_calendar.php';        $myCalendar = new tc_calendar($nombre, true, false);                $year = date('Y');        $mes = date('m');        $dia = date('d');                        if($mes <= 2){            $mes_dos_antes = 12 + $mes - 2;            $year_ini = (int)$year - 1;        }else            $mes_dos_antes = (int)$mes - 2;                $hoy = $year."-".$mes."-".($dia+1);                        $myCalendar->setIcon("plugins/calendar/images/iconCalendar.gif");        $myCalendar->setDate(date('d', strtotime($date1)), date('m', strtotime($date1)), date('Y', strtotime($date1)));        $myCalendar->setPath("plugins/calendar/");        $myCalendar->setYearInterval(2012, 2013);        $myCalendar->dateAllow($year_ini."-".$mes_dos_antes.'-01', $hoy);        $myCalendar->setAlignment('left', 'bottom');        $myCalendar->setZIndex($zindex);        $myCalendar->setDatePair($nombre, $par, $date2);        return $myCalendar;    }    function getUserData($codigo = "", $format = "object") {        if ($codigo != "")            $id = $codigo;        else if (!($this->isLogged())) {            return NULL;        }else            $id = $this->getDataLoged('codigo');        $sql = "SELECT u.login, u.owner, concat(u.nombre,' ',u.apellido1,' ',u.apellido2) nombre, u.perfil, u.cedula, u.email, u.clave, u.fechalogin, u.horalogin, u.fechalogintmp, u.horalogintmp, u.iptmp, u.ip, i.nombre creador, CONCAT(i.apellido1, ' ' ,i.apellido2) representante, p.descripcion as desc_perfil, u.estado, i.TipoPersona, i.Tel3 mail_comercio                FROM usuario u, interlocutor i, perfil p                WHERE u.login = '$id'                AND u.owner = i.login                AND p.perfil = u.perfil                LIMIT 1";        $result = mysql_query($sql);        if (($result)) {            if ($format == "array") {                $usuario = array();                $usuario = mysql_fetch_array($result);            } else {                $usuario = New stdClass();                $usuario = mysql_fetch_object($result);            }        }        return $usuario;    }    function getUsuario($codigo = "") {        if ($codigo != "")            $id = $codigo;        else if (!($this->isLogged())) {            return NULL;        }else            $id = $this->getDataLoged('codigo');        $sql = "SELECT u.login, u.owner, u.nombre, u.apellido1, u.apellido2, u.perfil, u.cedula, u.email, u.clave, u.fechalogin, u.horalogin, u.fechalogintmp, u.horalogintmp, u.iptmp, u.ip, i.nombre creador, p.descripcion as desc_perfil                FROM usuario u, interlocutor i, perfil p                WHERE u.login = '$id'                AND u.owner = i.login                AND p.perfil = u.perfil                LIMIT 1";        $result = mysql_query($sql);        if (($result)) {            $usuario = New stdClass();            $usuario = mysql_fetch_object($result);        }        return $usuario;    }    function getOwner($IdDistribuidor, $tabla = "") {        $owner = 0;        if ($tabla == "")            $tabla = "interlocutor";        $sql = "SELECT owner             FROM $tabla             WHERE login= '$IdDistribuidor'";                $result = mysql_query($sql) or $this->setCopie('',"Error: " . mysql_error());        if ($result) {            $dato = mysql_fetch_array($result);            $owner = $dato['owner'];        }        return $owner;    }    function getNewPass($perfil) {        global $MaxPassSize;        $clave = "";        $maximo = $MaxPassSize;        if ((int)$perfil === 13)            $maximo = (int)$MaxPassSize - 2;        for ($i = 0; $i < $maximo; $i++) {            $clave.= rand(0, 9);        }        return $clave;    }    function getNewLogin() {        global $userIdSize;        $LoginId = "";        $sql_select = "SELECT last_insert_id() Id";        $sql_update = "UPDATE userid                         SET LoginId = last_insert_id(LoginId+1)";        $result = mysql_query($sql_update);        $result = mysql_query("commit;");        $result_select = mysql_query($sql_select);        if (mysql_num_rows($result_select) <> 0) {            $row = mysql_fetch_array($result_select);            $LoginId = $row['Id'];        }        for ($i = strlen($LoginId); $i < $userIdSize; $i++) {            $LoginId = "0" . $LoginId;        }        return $LoginId;    }    function opcionesXPerfil($perfil) {        include_once 'php/funciones.php';        $fx = New Funciones();        $opciones = array();        $opcion = array();        $subopcion = New stdClass();        $id_opcion = 0;        $listado = array();                $usuario = $fx->getDataLoged("codigo");        $permisos_negados = $this->getExistePermisos($usuario);        if($perfil != 99){            $sql = "SELECT o.IdOpcion, o.Opcion, s.IdSubopcion, s.Subopcion                FROM opcion o, subopcion s, subopciones_x_perfil sp                WHERE o.IdOpcion = s.IdOpcion                AND s.IdSubopcion = sp.IdSubopcion                AND s.estado = 'A'                AND sp.estado = 'A'                AND sp.perfil = $perfil                ORDER BY o.IdOpcion, s.IdSubopcion                ";        }else{            $sql = "SELECT o.IdOpcion, o.Opcion, s.IdSubopcion, s.Subopcion                FROM opcion o, subopcion s                WHERE o.IdOpcion = s.IdOpcion                AND s.estado = 'A'                ORDER BY o.IdOpcion, s.IdSubopcion                ";        }        $result = mysql_query($sql) or $this->setCopie('',"Error: " . mysql_error());        if ($result) {            while ($subopcion = mysql_fetch_object($result)) {                if ($id_opcion < $subopcion->IdOpcion) {                    $id_opcion++;                    $opcion = array();                }                               if(!(in_array($subopcion->IdSubopcion, $permisos_negados))){                    $opcion[] = $subopcion;                    $listado[] = $subopcion->Subopcion;                    $opciones[$subopcion->IdOpcion] = $opcion;                }            }        }        $listado[]= "inicio";        $listado[]= "soporte";        $listado[]= "cambio_claves";        $this->setDataLoged('permisos_listado', $listado);        return $opciones;    }    function listadoSubopciones($perfil) {        $opciones = array();        $ids = array();        $subopcion = New stdClass();        $sql = "SELECT s.IdSubopcion, s.Subopcion                FROM subopcion s, subopciones_x_perfil sp                WHERE s.IdSubopcion = sp.IdSubopcion                AND s.estado = 'A'                AND sp.estado = 'A'                AND sp.perfil = $perfil                ORDER BY s.IdSubopcion                ";        $result = mysql_query($sql) or $this->setCopie('',"Error: " . mysql_error());        if ($result) {            while ($subopcion = mysql_fetch_object($result)) {                $ids[] = $subopcion->IdSubopcion;                $opciones[] = $subopcion;            }        }        return $ids;    }    function getExistePermisos($login, $exist = false) {        $respuesta = 0;        $permisos_negados = array();        $row = new stdClass();                $sql = "SELECT id_usuario, permisos_negados                FROM usuario_permisos                WHERE id_usuario = '$login'";        $result = mysql_query($sql);        if ($result) {            $row = mysql_fetch_object($result);            $respuesta = $this->getElement($row, 'permisos_negados');            $permisos_negados = explode(",", $respuesta);        }                return $permisos_negados;    }    function getElement($obj, $element){        if(isset($obj->$element)){            return $obj->$element;        }        return NULL;    }    function registrarIngreso($login, $fg, $hg) {        $valor = 0;        $ip = $_SERVER['REMOTE_ADDR'];        $sql_select = "SELECT ip, fechalogin, horalogin                    FROM usuario                    WHERE login = '$login'                    LIMIT 1";        $result_select = mysql_query($sql_select);        $datos_old = mysql_fetch_object($result_select);        $sql_tmp = "UPDATE usuario             SET iptmp = '$datos_old->ip' ,                 fechalogintmp = '$datos_old->fechalogin',                 horalogintmp = '$datos_old->horalogin'             WHERE login = '$login'";        $result_tmp = mysql_query($sql_tmp);        if ($result_tmp > 0) {            $sql = "UPDATE usuario                     SET ip = '$ip' ,                         fechalogin = '$fg',                         horalogin = '$hg'                     WHERE login = '$login'";            $result = mysql_query($sql);            if ($result > 0) {                $valor = mysql_query("commit");                $this->setTransGestionada($ip);            }        }        return $valor;    }    function setLogin($usuario) {        global $warningInicio, $warning_mantenimiento;        $fg = date("Ymd");        $hg = date("His"); // de la actualizacion del saldo                $this->setDataLoged('codigo', $usuario['login']);        $this->setDataLoged('owner', $usuario['owner']);        $this->setDataLoged('estado', $usuario['estado']);        $this->setDataLoged('owner_nombre', $usuario['owner_nombre']);        $nombre_loged = $usuario['nombre'] . " " . $usuario['apellido1'];        $this->setDataLoged('nombre', $nombre_loged);        $this->setDataLoged('perfil', $usuario['perfil']);        $this->setDataLoged('desc_perfil', $usuario['desc_perfil']);                /*VALIDAR SI OPERACION ESTA CONFIGURADA EN MANTENIMIENTO*/        $op_mantenimiento = $this->getConfiguracion('op_mantenimiento');        $this->setDataLoged('op_mantenimiento', $op_mantenimiento);        $this->setDataLoged('fecha', $fg);        $this->setDataLoged('hora', $hg);                $complemento = strtoupper($usuario['nombre'] . " " . $usuario['apellido1'] . " ( " . ucfirst($usuario['desc_perfil']) . " )");        if($warningInicio === true){            if($warning_mantenimiento === true)                $this->setCopie('warning_mantenimiento', '');            else                $this->setCopie('warning_inicio', '');        }else            $this->setCopie('login_ok', $complemento);                $this->registrarIngreso($usuario['login'], $fg, $hg);    }    function getConfiguracion($criterio) {        $sql = "SELECT valor                FROM configuracion                WHERE nombre = '$criterio'                AND estado = 'A'                LIMIT 1";        $result = mysql_query($sql);        $configuracion = mysql_fetch_object($result);        return $configuracion->valor;    }    function filtros($filtros, $usuario = "", $param = NULL){        global $accion;        $parametros = $this->getParametros();        $dia_manana = date('d',time()+84600);          $mes_manana = date('m',time()+84600);          $ano_manana = date('Y',time()+84600);          $maniana = $ano_manana."-".$mes_manana."-".$dia_manana;        $session_data3 = $this->getDataLoged('date3');        $session_data4 = $this->getDataLoged('date4');        if(isset($parametros->date3)){            $date3_default = $parametros->date3;        }else if(isset($session_data3)){            $date3_default = $session_data3;        }else{            $date3_default = date("Ymd");        }        if(isset($parametros->date4)){            $date4_default = $parametros->date4;        }        else if(isset($session_data4))            $date4_default = $session_data4;        else            $date4_default = $maniana;                        //unset($_SESSION['date3']);        //unset($_SESSION['date4']);        //unset($_SESSION['param_codigo']);                $calendar_inicial = $this->getCalendar("date3", "date4", $date3_default, $date4_default, 2);        $calendar_final = $this->getCalendar("date4", "", $date4_default, $date4_default, 1);                if($usuario == "")            $usuario = $this->getDataLoged('codigo');                if(isset($filtros['dia']) && $filtros['dia'] === "1"){            $session_data = $this->getDataLoged('date');                    if(isset($parametros->date)){                $date_default = $parametros->date;            }else if(isset($session_data))                $date_default = $session_data;            else                    $date_default = date("Ymd");                        $calendar = $this->getCalendar("date", "", $date_default, $date4_default, 1);        }                require_once("classes/funciones.html.php");        fxHTML::filtros_multiples($calendar_inicial, $calendar_final, $filtros, $accion, $param, $calendar);    }    function  titulo($titulo){        require_once("html/funciones.html.php");        fxHTML::titulo($titulo);    }    function  subtitulo($titulo){        require_once("html/funciones.html.php");        fxHTML::subtitulo($titulo);    }    function getResumen($campo, $query){        $sql = "SELECT format(sum($campo), 2) dato FROM ". $query->from. " WHERE ".$query->where;                 $result = mysql_query($sql);        $row = mysql_fetch_object($result);        $row->resumen_nombre = "TOTAL";        $datos[] = $row;         echo $sql;        require_once("html/funciones.html.php");        fxHTML::resumen($datos);    }        function getCondicionFiltro($filtros, $export = false, $metod = "POST"){        global $seccion, $fechaRegUtilidad;        $condicion = "";        $alias = '';        $parametros = $this->getParametros($metod);        $paramGet = $this->getParametros('GET');        if(isset($paramGet->page) && ((int)$paramGet->page >= 1)){            $condicion = $this->getDataLoged('condicion_filtro');            return $condicion;        }        $alias = $filtros[5];        if(isset($parametros->id) && $parametros->id != "" && ((int)$parametros->id > 0)){            if(isset($filtros['id']) && $filtros['id'] !== '0' && $filtros['id'] !== '1'){                $alias = $filtros['id'].'.';            }            $condicion = " AND ".$alias."id = '$parametros->id'";        }        if(isset($parametros->nombre) && $parametros->nombre != ""){            if(isset($filtros['nombre']) && $filtros['nombre'] !== '0' && $filtros['nombre'] !== '1' ){                $alias = $filtros['nombre'].'.';            }            $condicion = " AND ".$alias."nombre LIKE '%$parametros->nombre%'";        }        if($filtros['fechas'] == '1'){            if((isset($parametros->date3)) && $parametros->date3 != ''){                if(($parametros->date3 < $fechaRegUtilidad )&& $seccion === 'reporte_utilidad'){                    $_SESSION['date3'] = $fechaRegUtilidad;                }else{                    if(isset($paramGet->back) &&($paramGet->back == '1') && $alias !== "s.")                        $_SESSION['date3'] = $parametros->date4;                     else                        $_SESSION['date3'] = $parametros->date3;                 }            }            if((isset($parametros->date4)) && $parametros->date4 != ''){                $_SESSION['date4'] = $parametros->date4;             }            $date3 = $_SESSION['date3'];            $date4 = $_SESSION['date4'];                        if($alias === "s."){                $dato = "fecha_creacion";            }else{                $dato = "Fecha";            }            if($alias != ""){                $alias = $alias.".";            }            //if(!($alias === "s." && isset($paramGet->back) && $paramGet->back == '1')){                $condicion.= " AND ".$alias.$dato." between '".$date3."' AND '".$date4."' ";            //}        }        if($filtros['dia'] == '1'){                        if((isset($parametros->date)) && $parametros->date != ''){                $_SESSION['date'] = $parametros->date;             }else{                $_SESSION['date'] = date("Y-m-d");            }                        $date = $_SESSION['date'];            $punto_alias = ".";            if($alias === "s"){                $dato = "fecha_creacion";            }else{                if($alias == ""){                    $dato = "fecha";                    $punto_alias = "";                }else                        $dato = "Fecha";            }            $condicion.= " AND DATE(".$alias.$punto_alias.$dato.") = '".$date."'";        }                $this->setDataLoged('condicion_filtro', $condicion);        if($condicion === 0)            $condicion = '';        return $condicion;    }    function getExport($nombre = "reporte_"){        global $seccion;        $grid_row_count = $this->getDataLoged('grid_row_count');        $params = $this->getParametros("GET");                if($grid_row_count > 0){            $hoy = date("Y-m-d");            switch ($params->type) {                case 'xls':                    header("Content-type: application/vnd.ms-excel");                    $nombre.= $hoy.".xls";                    header("Content-Disposition: attachment; filename=".$nombre);                    $this->setDataLoged('exporting', '1');                    break;                case 'pdf':                    $query = $this->getDataLoged('query');                    $this->getPDF($nombre, $query);                    break;                default :                    header("Content-type: application/vnd.ms-excel");                    $nombre.= $hoy.".xls";                    header("Content-Disposition: attachment; filename=".$nombre);                    $this->setDataLoged('exporting', '1');                    break;            }            return true;        }else{            $this->setCopie('', 'No hay datos para ser exportados'); //1.2.3            header('location:?opcion='.$seccion);        }        return false;    }            function getUniqId(){        return date("y").time();    }    function getPDF($titulo, $query){        $usuario = $this->getDataLoged('nombre');        $date = date('H:i:s');        $titulo = str_replace("_", " ", $titulo." ".$date);        $fileName = $titulo."_".$date.".pdf";                $pdf = $this->initPDF($usuario, $titulo);        $data = $this->reportQuery($query);                $campos = $data['campos'];        // add a page           $pdf->AddPage();                $html = '<table border= "1" cellpadding="1" cellspacing="1">';        $html.= '<thead><tr style="background-color:#CCCCCC;color:#0000FF;">';        for($j= 0; $j<count($campos); $j++){            $html.='<td align="center" ><b>'.strtoupper($campos[$j]).'</b></td>';        }        $html.= '</tr></thead>';                $cantDatos = count($data) - 2;                for($i = 0; $i<=($cantDatos); $i++){            $html .= '<tr>';            for($j= 0; $j<count($campos); $j++){                $c = (string)$campos[$j];                $dato = str_replace("Ñ", "N", utf8_encode($data[$i][$j]));                $html .= '<td align="center">'. $dato .'</td>';            }            $html .= '</tr>';        }        $html .= "</table>";                $sql_resumen = $this->getDataLoged('sql_resumen');                if(!empty($sql_resumen)){            $result = mysql_query($sql_resumen);            $datos_resumen = mysql_fetch_object($result);                                    $html_resumen = '<table border= "1" cellpadding="1" cellspacing="1">';            $html_resumen .= '<tr><td>';            $html_resumen .= "TOTAL VENDIDO:  $".$datos_resumen->dato;            $html_resumen .= "</td></tr>";            $html_resumen .= '<tr><td>';            $html_resumen .= "TOTAL UTILIDAD: $".$datos_resumen->utilidad;            $html_resumen .= "</td></tr>";            $html_resumen .= "</table>";        }        $html .=$html_resumen;                $pdf->writeHTML($html, true, false, false, false, '');        // end of TOC page        $pdf->endTOCPage();        // ---------------------------------------------------------        //Close and output PDF document        $pdf->Output($fileName, 'I');    }    function initPDF($author, $titulo){        require_once('toc_tcpdf.php');        $pdf = new TOC_TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);        // set document information        $pdf->SetCreator(PDF_CREATOR);        $pdf->SetAuthor($author);        $pdf->SetTitle('REPORTE PDF');        $pdf->SetSubject('REPORTE PDF');        $pdf->SetKeywords('REPORTE, PDF');        // set default header data        $pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, $titulo, PDF_HEADER_STRING);        // set header and footer fonts        $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));        $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));        // set default monospaced font        $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);        //set margins        $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);        $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);        $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);        //set auto page breaks        $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);        //set image scale factor        $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);        //set some language-dependent strings        $pdf->setLanguageArray($l);        // set font        $pdf->SetFont('helvetica', '', 7);        return $pdf;    }    function reportQuery($query){        $data = array();        $select =  "SELECT ".$query->select[0];        for($i = 1; $i< count($query->select); $i++) {            $select .= ", ".$query->select[$i];         }        $select .= " FROM ".$query->from." WHERE ".$query->where;               $result = mysql_query($select);        if($result){            $numCampos = mysql_num_fields($result);             for($i = 0; $i< $numCampos; $i++){                $campos[] = mysql_field_name($result, $i);            }            while ($row = mysql_fetch_array($result)) {                $data[] = $row;            }            $data['campos']= $campos;        }        return $data;    }    function mostrarPaginacion($select, $tabla, $where, $group_by = "", $order_by = "") {        $sql = "SELECT $select				FROM $tabla				$where				$group_by				$order_by";        $result = mysql_query($sql) or die(mysql_error());        if (mysql_num_rows($result) > 0)            $total = mysql_num_rows($result);        else            $total = 0;        $pt = ceil($total / $this->registros_mostrar) . "/" . $total;        include("php/html/inicio.html.php");        inicioHTML::paginacion($pt, $this->paginas_mostrar, $this->paginas_mostrar);    }    function generarImagen($seccion, $imagen = "", $tamano = "", $imagenAnterior = "") {                $archivo = $imagen['tmp_name'];        $image_info = getimagesize($archivo);        $image_type = $image_info[2];        $ruta = "media/imagenes/" . $seccion . "/" . $tamano . "/";        $filename = uniqid(time());        $this->newWidth = $this->anchos[$seccion . "_" . $tamano];        $this->newHeight = $this->alturas[$seccion . "_" . $tamano];        list($width, $height) = getimagesize($archivo);        if ($imagenAnterior != "") {            unlink($ruta . $imagenAnterior);        }        if (!file_exists($ruta)) {            mkdir($ruta, 0777);        }                 $tipo_imagen = "imagen";        if ($tamano != "big") {            $tipo_imagen = $tipo_imagen . "_" . $tamano;        }        if ($imagen != "") {            if ($image_type == IMAGETYPE_JPEG) {                $base = imagecreatefromjpeg($_FILES[$tipo_imagen]['tmp_name']);                $filename = $filename . ".jpg";            } else if ($image_type == IMAGETYPE_GIF) {                $base = imagecreatefromgif($_FILES[$tipo_imagen]['tmp_name']);                $filename = $filename . ".gif";            } else if ($image_type == IMAGETYPE_PNG) {                $filename = $filename . ".png";                $base = imagecreatefrompng($_FILES[$tipo_imagen]['tmp_name']);                imagealphablending($base, false);                imagesavealpha($base, true);            }                        $big = imagecreatetruecolor($this->newWidth, $this->newHeight);            $blanco = imagecolorallocate($big, 255, 255, 255);                        imagecolortransparent($big, $blanco);            imagecopyresampled($big, $base, 0, 0, 0, 0, $this->newWidth, $this->newHeight, $width, $height);            imagepng($base, $ruta . $filename, 4);            imagedestroy($base);            imagedestroy($big);            if (file_exists("media/imagenes/" . $seccion . "/" . $tamano . "/" . $filename)) {                return $filename;            } else {                return "Error al subir el archivo";            }        } else {            return "Error al subir archivo 2";        }    }    function generarImagenes ($path, $_width, $_height, $imagen){            $ruta = "../media/imagenes/" . $path . "/";            $path = $ruta;             $archivo = $imagen['tmp_name'];            $image_info = getimagesize($archivo);            $image_type = $image_info[2];            $filename = uniqid(time()).".jpg";            if ($path == "" && $_width="" && $_height == "")                    return $msj = "error, parametros incorrectos";            $this->divThumb = 5;            $this->newWidth = $_width;            $this->newHeight = $_height;            if (!file_exists($path)){                    mkdir($path,0777);                    mkdir($path."big/",0777);                    mkdir($path."thumbs/",0777);            }	            list($width,$height) = getimagesize($archivo);            if( $image_type == IMAGETYPE_JPEG ) {                    $original = imagecreatefromjpeg($archivo);            } else if( $image_type == IMAGETYPE_GIF ) {                    $original = imagecreatefromgif($archivo);            } else if( $image_type == IMAGETYPE_PNG ) {                    $original = imagecreatefrompng($archivo);            }            if($width >= $height){                    if($width > $this->newWidth)                            $this->newHeight = ($height/$width)*$this->newWidth;                    else{                            $this->newWidth = $width;                            $this->newHeight = $height;                    }            }else{                    if($height > $this->newHeight)                            $this->newWidth = ($width/$height)*$this->newHeight;                    else                    {                            $this->newWidth = $width;                            $this->newHeight = $height;                    }            }            $big = imagecreatetruecolor($this->newWidth,$this->newHeight);            $thumb = imagecreatetruecolor(($this->newWidth/$this->divThumb),($this->newHeight/$this->divThumb));            $blanco = imagecolorallocate($big, 255, 255, 255);            imagefill($big, 0, 0, $blanco);            imagecopyresampled($big,$original,0,0,0,0,$this->newWidth,$this->newHeight,$width,$height);            imagecopyresampled($thumb,$original,0,0,0,0,($this->newWidth/$this->divThumb),($this->newHeight/$this->divThumb),$width,$height);            imagejpeg($big,$path."big/".$filename,80);            imagejpeg($thumb,$path."thumbs/".$filename,80);            imagedestroy($big);            imagedestroy($thumb);            imagedestroy($original);            if (file_exists($path."thumbs/".$filename) && file_exists($path."big/".$filename))                return $filename;            else                $msj = "error al crear imagen";                                 return $msj;                }    function subirArchivo($seccion = "", $categoria = "", $archivo = "") {        $response = new stdClass();        $path_upload = "media/" . $seccion . "/" . $categoria . "/";        $ext = substr($archivo['name'], -3);        if (!file_exists($path_upload))            mkdir($path_upload, 755);        $filename = uniqid(time()) . "." . $ext;        try {            $file_moved = move_uploaded_file($archivo["tmp_name"], $path_upload . $filename);                        if($file_moved === false){                $response->respuesta = 'ERROR';                $response->error = "Error al intentar copiar el archivo, comuniquese con soporte t&eacute;cnico";                return $response;            }                            if (file_exists($path_upload . "/" . $filename)){                $response->respuesta = 'OK';                $response->filename = $filename;                return $response;            }else {                $response->respuesta = 'ERROR';                $response->error = "Error al intentar copiar el archivo, comuniquese con soporte t&eacute;cnico";                return $response;            }        } catch (Exception $e) {            $response->respuesta = 'ERROR';            $response->error = $e;            return $response;        }    }    function subirArchivo3($seccion = "", $tipo = "", $archivo = "") {        $path_upload = "../media/documentos/" . $seccion . "/" . $tipo . "/";        $ext = substr($archivo['name'], -3);        if (!file_exists($path_upload))            mkdir($path_upload, 755);        $filename = uniqid(time()) . "." . $ext;        try {            move_uploaded_file($archivo["tmp_name"], $path_upload . $filename);        } catch (Exception $e) {            return ("Error Subida:" . $e);        }        if (file_exists($path_upload . "/" . $filename))            return $filename;        else {            return $msj = "errorSubida";        }    }    function subirArchivo2($seccion = "", $categoria = "", $archivo = "") {        $response = new stdClass();        $path_upload = "media/" . $seccion . "/" . $categoria . "/";        $ext = substr($archivo['name'], -3);        if (!file_exists($path_upload))            mkdir($path_upload, 755);        $filename = uniqid(time()) . "." . $ext;        try {            copy($_FILES['archivo']['tmp_name'], $path_upload . $filename);            //move_uploaded_file($archivo["tmp_name"], $path_upload . $filename);        } catch (Exception $e) {            $response->respuesta = 'ERROR';            $response->error = $e;            return $response;        }        if (file_exists($path_upload . "/" . $filename)) {            $response->respuesta = 'OK';            $response->filename = $filename;            return $response;        } else {            $response->respuesta = 'ERROR';            $response->error = "Error intentando subir archivo ";            return $response;        }    }}?>